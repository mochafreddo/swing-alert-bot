name: CD (Terraform)

on:
  push:
    branches: [ main, master ]
    paths:
      - 'infra/terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (dev or prod)'
        type: choice
        required: true
        default: dev
        options:
          - dev
          - prod
      apply:
        description: 'Apply after planning (use with care)'
        type: boolean
        required: false
        default: false
  pull_request:
    branches: [ main, master ]
    paths:
      - 'infra/terraform/**'

permissions:
  id-token: write   # for OIDC to AWS
  contents: read

concurrency:
  group: terraform-${{ github.event.pull_request.number || github.ref_name }}
  cancel-in-progress: false

env:
  TF_DIR: infra/terraform
  TF_IN_AUTOMATION: '1'
  TF_INPUT: '0'

jobs:
  plan:
    name: Plan (${{ inputs.environment || 'dev' }})
    runs-on: ubuntu-latest
    # On PRs from forks, skip to avoid missing OIDC permissions
    if: |
      github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name == github.repository
    environment: ${{ inputs.environment || 'dev' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Init
        run: terraform -chdir=$TF_DIR init

      - name: Select Workspace
        shell: bash
        run: |
          ENV="${{ inputs.environment || 'dev' }}"
          if [ "$ENV" = "prod" ]; then
            terraform -chdir=$TF_DIR workspace new prod || true
            terraform -chdir=$TF_DIR workspace select prod
          else
            terraform -chdir=$TF_DIR workspace select default || terraform -chdir=$TF_DIR workspace new default
          fi

      - name: Terraform Plan
        run: |
          ENV="${{ inputs.environment || 'dev' }}"
          terraform -chdir=$TF_DIR plan \
            -var-file=envs/${ENV}.tfvars \
            -out=tfplan

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ inputs.environment || 'dev' }}
          path: ${{ env.TF_DIR }}/tfplan

  apply:
    name: Apply (${{ inputs.environment || 'dev' }})
    runs-on: ubuntu-latest
    needs: plan
    environment: ${{ inputs.environment || 'dev' }}
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.apply) ||
      (github.event_name == 'push')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Terraform Init
        run: terraform -chdir=$TF_DIR init

      - name: Select Workspace
        shell: bash
        run: |
          ENV="${{ inputs.environment || 'dev' }}"
          if [ "$ENV" = "prod" ]; then
            terraform -chdir=$TF_DIR workspace new prod || true
            terraform -chdir=$TF_DIR workspace select prod
          else
            terraform -chdir=$TF_DIR workspace select default || terraform -chdir=$TF_DIR workspace new default
          fi

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-${{ inputs.environment || 'dev' }}
          path: ${{ env.TF_DIR }}

      - name: Terraform Apply
        run: terraform -chdir=$TF_DIR apply -auto-approve tfplan
